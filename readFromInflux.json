[
  {
    "id": "e86cd02b13b42b36",
    "type": "tab",
    "label": "readExample",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "6188e4340feb6418",
    "type": "inject",
    "z": "e86cd02b13b42b36",
    "name": "trigger query",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 330,
    "y": 160,
    "wires": [["b5bf06ef8b352f65"]]
  },
  {
    "id": "8e82ce4b5056f151",
    "type": "influxdb in",
    "z": "e86cd02b13b42b36",
    "influxdb": "c60d3a79942bb4a7",
    "name": "max temperature for last 10 days",
    "query": "from(bucket:\"sensor_data\")\n    |> range(start: -10d)\n    |> filter(fn: (r) => r._measurement == \"temperature\" and r.studentId == \"411\")\n    |> max()",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "HTW",
    "x": 620,
    "y": 420,
    "wires": [["c99e2fc39829e81b"]]
  },
  {
    "id": "a30f3fade5648068",
    "type": "debug",
    "z": "e86cd02b13b42b36",
    "name": "Log Max Temp",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1060,
    "y": 420,
    "wires": []
  },
  {
    "id": "3db773d3c9cc0bc9",
    "type": "inject",
    "z": "e86cd02b13b42b36",
    "name": "trigger query",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 330,
    "y": 380,
    "wires": [["8e82ce4b5056f151", "95730a0462a4f719"]]
  },
  {
    "id": "c99e2fc39829e81b",
    "type": "function",
    "z": "e86cd02b13b42b36",
    "name": "extractValue",
    "func": "const response = msg.payload[0];\nconst maxTemp = response._value.toFixed(2)\nreturn {payload: maxTemp};",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 420,
    "wires": [["a30f3fade5648068"]]
  },
  {
    "id": "95730a0462a4f719",
    "type": "influxdb in",
    "z": "e86cd02b13b42b36",
    "influxdb": "c60d3a79942bb4a7",
    "name": "min temperature for last 10 days",
    "query": "from(bucket:\"sensor_data\")\n    |> range(start: -10d)\n    |> filter(fn: (r) => r._measurement == \"temperature\" and r.studentId == \"411\")\n    |> min()",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "HTW",
    "x": 610,
    "y": 340,
    "wires": [["897932745cb4b064"]]
  },
  {
    "id": "9d83054c2260887f",
    "type": "debug",
    "z": "e86cd02b13b42b36",
    "name": "Log Min Temp",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1060,
    "y": 340,
    "wires": []
  },
  {
    "id": "897932745cb4b064",
    "type": "function",
    "z": "e86cd02b13b42b36",
    "name": "extractValue",
    "func": "const response = msg.payload[0];\nconst minTemp = response._value.toFixed(2)\nreturn {payload: minTemp};",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 870,
    "y": 340,
    "wires": [["9d83054c2260887f"]]
  },
  {
    "id": "d35f18865194d61a",
    "type": "influxdb in",
    "z": "e86cd02b13b42b36",
    "influxdb": "c60d3a79942bb4a7",
    "name": "min/max combined query",
    "query": "temps = from(bucket: \"sensor_data\")\n  |> range(start: -10d)\n  |> filter(fn: (r) => r._measurement == \"temperature\" and r.studentId == \"411\")\n\nmin_temp = temps\n  |> min()\n\nmax_temp = temps\n  |> max()\n\nmin_temp |> yield(name: \"min_temp\")\nmax_temp |> yield(name: \"max_temp\")",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "HTW",
    "x": 590,
    "y": 560,
    "wires": [["ed59851cbcbc6e34"]]
  },
  {
    "id": "bb814d4240a5f630",
    "type": "inject",
    "z": "e86cd02b13b42b36",
    "name": "trigger query",
    "props": [],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "x": 330,
    "y": 560,
    "wires": [["d35f18865194d61a"]]
  },
  {
    "id": "05243d6fa395cdf9",
    "type": "debug",
    "z": "e86cd02b13b42b36",
    "name": "Log Result",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1010,
    "y": 560,
    "wires": []
  },
  {
    "id": "ed59851cbcbc6e34",
    "type": "function",
    "z": "e86cd02b13b42b36",
    "name": "extractValue",
    "func": "const [minResult, maxResult] = msg.payload;\nconst minTemp = minResult._value.toFixed(2);\nconst maxTemp = maxResult._value.toFixed(2);\nconst payload = {minTemp, maxTemp};\n\nreturn {payload };",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 810,
    "y": 560,
    "wires": [["05243d6fa395cdf9"]]
  },
  {
    "id": "b5bf06ef8b352f65",
    "type": "influxdb in",
    "z": "e86cd02b13b42b36",
    "influxdb": "c60d3a79942bb4a7",
    "name": "avg temp grouped by student (48hr)",
    "query": "from(bucket:\"sensor_data\")\n    |> range(start: -48h)\n    |> filter(fn: (r) => r._measurement == \"temperature\")\n    |> group(columns: [\"studentId\"])\n    |> mean()\n    |> yield(name: \"_results\")",
    "rawOutput": false,
    "precision": "",
    "retentionPolicy": "",
    "org": "HTW",
    "x": 610,
    "y": 160,
    "wires": [["502b04f541cdd42e"]]
  },
  {
    "id": "ede4ed005ef503a7",
    "type": "debug",
    "z": "e86cd02b13b42b36",
    "name": "Log Grouped Average Temp",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 1180,
    "y": 160,
    "wires": []
  },
  {
    "id": "502b04f541cdd42e",
    "type": "function",
    "z": "e86cd02b13b42b36",
    "name": "extractIndividualValues",
    "func": "const aggregates = msg.payload;\nconst avgTemps = aggregates.map(\n    ({ studentId, _value }) => ([studentId, _value.toFixed(2)])\n);\nconst payload = Object.fromEntries(avgTemps);\nreturn { payload };",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 160,
    "wires": [["ede4ed005ef503a7"]]
  },
  {
    "id": "c60d3a79942bb4a7",
    "type": "influxdb",
    "hostname": "localhost",
    "port": "8086",
    "protocol": "http",
    "database": "DEMO",
    "name": "",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "http://localhost:8086",
    "timeout": "10",
    "rejectUnauthorized": true
  }
]
