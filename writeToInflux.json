[
  {
    "id": "3fdab561c42d097e",
    "type": "tab",
    "label": "writeToInfluxDB",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e4f5c9163e602805",
    "type": "mqtt in",
    "z": "3fdab561c42d097e",
    "name": "",
    "topic": "HTW_IoT/+/temp",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "dd07aa4b9a19f86c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 540,
    "y": 460,
    "wires": [["54bf6ab0c4f9b639", "25cbd0e9135257be"]]
  },
  {
    "id": "42d78dc7f189b65e",
    "type": "mqtt in",
    "z": "3fdab561c42d097e",
    "name": "",
    "topic": "HTW_IoT/+/humi",
    "qos": "2",
    "datatype": "auto-detect",
    "broker": "dd07aa4b9a19f86c",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 540,
    "y": 740,
    "wires": [["aa881d77b2b2d96d", "25cbd0e9135257be"]]
  },
  {
    "id": "54bf6ab0c4f9b639",
    "type": "function",
    "z": "3fdab561c42d097e",
    "name": "prepareForInfluxTemp",
    "func": "// Sanitize the message to only contain the float value \nconst rawValue = `${msg.payload}`;\nconst cleanedValue = rawValue.replace(/[^\\d.-]/g, '')\nconst temp = parseFloat(cleanedValue);\n\n// Extract studendId string from mqtt topic\nfunction extractStudentId() {\n    const parts = msg.topic.split('/');\n    if (parts.length >= 2) {\n        return parts[1];\n    } else {\n        return \"Invalid format\";\n    }\n}\nconst studentId = extractStudentId();\n\n// Construct payload for \nconst values = { value: temp };\nconst tags = { studentId };\nconst payload = [values, tags];\n\nreturn { payload };",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 460,
    "wires": [["724382dff54a2888", "36ee935d3801626a"]]
  },
  {
    "id": "724382dff54a2888",
    "type": "influxdb out",
    "z": "3fdab561c42d097e",
    "influxdb": "c60d3a79942bb4a7",
    "name": "Store temp",
    "measurement": "temperature",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "HTW",
    "bucket": "sensor_data",
    "x": 1190,
    "y": 460,
    "wires": []
  },
  {
    "id": "36ee935d3801626a",
    "type": "debug",
    "z": "3fdab561c42d097e",
    "name": "Log db writes",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "statusVal": "",
    "statusType": "auto",
    "x": 1140,
    "y": 600,
    "wires": []
  },
  {
    "id": "aa881d77b2b2d96d",
    "type": "function",
    "z": "3fdab561c42d097e",
    "name": "prepareForInfluxHumi",
    "func": "// Sanitize the message to only contain the float value \nconst rawValue = `${msg.payload}`;\nconst cleanedValue = rawValue.replace(/[^\\d.-]/g, '');\nconst humi = parseFloat(cleanedValue);\n\n// Extract studentID from mqtt topic\nfunction extractStudentId() {\n    const parts = msg.topic.split('/');\n    if (parts.length >= 2) {\n        return parts[1];\n    } else {\n        return \"Invalid format\";\n    }\n}\nconst studentId = extractStudentId();\n\n// Construct Influx Point payload\nconst values = { value: humi };\nconst tags = { studentId };\nconst payload = [values, tags];\n\nreturn { payload };",
    "outputs": 1,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 880,
    "y": 740,
    "wires": [["965936e1b5d5dc16", "36ee935d3801626a"]]
  },
  {
    "id": "965936e1b5d5dc16",
    "type": "influxdb out",
    "z": "3fdab561c42d097e",
    "influxdb": "c60d3a79942bb4a7",
    "name": "Store humi",
    "measurement": "humidity",
    "precision": "",
    "retentionPolicy": "",
    "database": "database",
    "precisionV18FluxV20": "ms",
    "retentionPolicyV18Flux": "",
    "org": "HTW",
    "bucket": "sensor_data",
    "x": 1190,
    "y": 740,
    "wires": []
  },
  {
    "id": "25cbd0e9135257be",
    "type": "debug",
    "z": "3fdab561c42d097e",
    "name": "Log raw mqtt msg",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 790,
    "y": 600,
    "wires": []
  },
  {
    "id": "dd07aa4b9a19f86c",
    "type": "mqtt-broker",
    "name": "HiveMQ",
    "broker": "broker.hivemq.com",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "autoUnsubscribe": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthRetain": "false",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closeRetain": "false",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willRetain": "false",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "c60d3a79942bb4a7",
    "type": "influxdb",
    "hostname": "localhost",
    "port": "8086",
    "protocol": "http",
    "database": "DEMO",
    "name": "",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "http://localhost:8086",
    "timeout": "10",
    "rejectUnauthorized": true
  }
]
